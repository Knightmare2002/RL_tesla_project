warning: in the working copy of 'controllers/tesla_controller/tesla_controller.py', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'worlds/new_Highway.wbt', LF will be replaced by CRLF the next time Git touches it
diff --git a/controllers/tesla_controller/tesla_controller.py b/controllers/tesla_controller/tesla_controller.py
index f34ef9c..06b8d6f 100644
--- a/controllers/tesla_controller/tesla_controller.py
+++ b/controllers/tesla_controller/tesla_controller.py
@@ -42,12 +42,12 @@ class CustomCarEnv:
         self.collision_th = 0.5
         #==========================
 
-        self.max_timesteps = 5000 #settato a 1000 per 100m di percorso
+        self.max_timesteps = 2000 #settato a 1000 per 100m di percorso
         self.curr_timestep = 0
         self.curr_episode = 0
 
         #=====Road settings=====
-        self.road_length = 520
+        self.road_length = 260
         self.road_width = 8
 
         #=====Supervisor: ottieni riferimento al nodo Tesla======
@@ -108,7 +108,7 @@ class CustomCarEnv:
 
         #=====Oggetti da randomizzare (ostacoli, barili ecc.)=====
         self.spawn_range_x = (0, self.road_length)
-        self.spawn_range_y = (-self.road_width/2, self.road_width/2)
+        self.spawn_range_y = (-self.road_width/4, self.road_width/4)
 
         self.random_objects = []
         i=0
@@ -458,13 +458,11 @@ class CustomCarEnv:
 
         return self._get_obs()
 
-    def assign_objects_and_target(self, min_distance=3.0, num_obj=7):
+    def assign_objects_and_target(self, min_distance=3.0, num_obj=6):
         # Definizione dei rettilinei: start, end, coordinata costante, asse costante
         straight_sections = [
             {'start': 15, 'end': 120, 'const': 0, 'axis': 'y'},      # rettilineo 1
-            {'start': 180, 'end': 260, 'const': -20, 'axis': 'y'}, # rettilineo 2
-            {'start': 320, 'end': 400, 'const': 0, 'axis': 'y'},  # rettilineo 3
-            {'start': 460, 'end': 520, 'const': 20, 'axis': 'y'}    # rettilineo 4
+            {'start': 180, 'end': 260, 'const': -20, 'axis': 'y'}
         ]
 
         if len(self.random_objects) < num_obj:
@@ -480,8 +478,8 @@ class CustomCarEnv:
         random.shuffle(all_objects)  # mescolali per distribuirli in modo casuale
 
         for i, section in enumerate(straight_sections):
-            # Prendi due oggetti per questo rettilineo
-            section_objects = all_objects[i*2 : (i+1)*2]
+            # Prendi tree oggetti per questo rettilineo
+            section_objects = all_objects[i*3 : (i+1)*3]
             placed_coords = []
 
             for obj in section_objects:
@@ -519,7 +517,7 @@ class CustomCarEnv:
     def udr(self):
         #=====Posizione iniziale random della macchina=====
         rand_x = self.default_car_pos[0] + np.random.uniform(-3, 5)
-        rand_y = np.random.uniform(self.spawn_range_y[0] + 1.5, self.spawn_range_y[1] - 1.5)  # leggermente dentro i bordi strada
+        rand_y = np.random.uniform(self.spawn_range_y[0], self.spawn_range_y[1])  # leggermente dentro i bordi strada
         self.translation_field.setSFVec3f([rand_x, rand_y, 0.4])
 
         #=====Rotazione iniziale random della macchina=====
@@ -527,7 +525,7 @@ class CustomCarEnv:
         self.rotation_field.setSFRotation([0, 0, 1, angle])  # ruota intorno a z
 
         #=====Posizioniamo oggetti e target nel mondo=====
-        self.assign_objects_and_target(3, self.num_obst+1)
+        self.assign_objects_and_target(5, self.num_obst+1)
 
 
 
diff --git a/requirements.txt b/requirements.txt
index ff35dc1..2397cfc 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,3 +1,4 @@
 numpy
 gymnasium
-stable-baselines3
\ No newline at end of file
+stable-baselines3
+wandb
\ No newline at end of file
diff --git a/train_sac.py b/train_sac.py
index abec883..b313dec 100644
--- a/train_sac.py
+++ b/train_sac.py
@@ -1,13 +1,68 @@
+import os
 from stable_baselines3 import SAC
 from stable_baselines3.sac.policies import MlpPolicy
-from webots_remote_env import WebotsRemoteEnv  # salva la classe sopra in questo file
+from stable_baselines3.common.callbacks import CheckpointCallback
+from wandb.integration.sb3 import WandbCallback
+import wandb
 
+from webots_remote_env import WebotsRemoteEnv
+
+wandb.init(
+    project="RL_tesla_project",          
+    name="SAC-Webots-run",             
+    sync_tensorboard=True,             
+    monitor_gym=True,                  
+    save_code=True
+)
+
+# Crea ambiente Webots
 env = WebotsRemoteEnv()
 
+# Percorsi per salvataggio
+CHECKPOINT_DIR = "C:\\Users\\samue\\OneDrive\\Desktop\\MLDL\\RL_tesla_project\\checkpoint_dir"
+MODEL_DIR = "C:\\Users\\samue\\OneDrive\\Desktop\\MLDL\\RL_tesla_project\\model_dir"
+os.makedirs(CHECKPOINT_DIR, exist_ok=True)
+os.makedirs(MODEL_DIR, exist_ok=True)
+
+# Callback per salvataggi periodici
+checkpoint_callback = CheckpointCallback(
+    save_freq=100_000,                     # salva ogni 100k timesteps
+    save_path=CHECKPOINT_DIR,
+    name_prefix="sac_model"
+)
+
+# Callback per integrazione con wandb
+wandb_callback = WandbCallback(
+    gradient_save_freq=0,
+    model_save_path=MODEL_DIR,
+    verbose=2,
+)
+
+latest_checkpoint_path = os.path.join(CHECKPOINT_DIR, "sac_model_100000_steps.zip")
+
+
 try:
-    model = SAC(MlpPolicy, env, verbose=0, device='cuda')
+    #model = SAC(MlpPolicy, env, verbose=1, device='cuda', tensorboard_log="./tb_logs/")
+    model = SAC.load(latest_checkpoint_path, env=env, device='cuda', tensorboard_log="./tb_logs/")
     print(f'Using device: {model.device}')
-    model.learn(total_timesteps=2_000_000, progress_bar=True)
-    model.save("webots_sac_model")
+
+    '''
+    model.learn(
+        total_timesteps=1_000_000,
+        progress_bar=True,
+        callback=[checkpoint_callback, wandb_callback]
+    )
+    '''
+    model.learn(
+        total_timesteps=1_900_000,
+        progress_bar=True,
+        reset_num_timesteps=False, 
+        callback=[checkpoint_callback, wandb_callback]
+    )
+
+    # Salva modello finale
+    model.save(os.path.join(MODEL_DIR, "webots_sac_final"))
+
 finally:
-    env.close()  # Assicura che venga sempre chiamato anche se il training fallisce
+    env.close()
+    wandb.finish()
diff --git a/worlds/new_Highway.wbt b/worlds/new_Highway.wbt
index ce2a4bc..8c7fe59 100644
--- a/worlds/new_Highway.wbt
+++ b/worlds/new_Highway.wbt
@@ -6,14 +6,13 @@ EXTERNPROTO "https://raw.githubusercontent.com/cyberbotics/webots/R2025a/project
 EXTERNPROTO "https://raw.githubusercontent.com/cyberbotics/webots/R2025a/projects/vehicles/protos/lincoln/LincolnMKZSimple.proto"
 EXTERNPROTO "https://raw.githubusercontent.com/cyberbotics/webots/R2025a/projects/vehicles/protos/bmw/BmwX5Simple.proto"
 EXTERNPROTO "https://raw.githubusercontent.com/cyberbotics/webots/R2025a/projects/objects/obstacles/protos/OilBarrel.proto"
-EXTERNPROTO "https://raw.githubusercontent.com/cyberbotics/webots/R2025a/projects/objects/traffic/protos/WorkBarrier.proto"
 EXTERNPROTO "https://raw.githubusercontent.com/cyberbotics/webots/R2025a/projects/objects/road/protos/Road.proto"
 
 WorldInfo {
 }
 Viewpoint {
-  orientation -0.22332622362804946 -0.22077677072814764 0.9494119313274325 4.649050070003774
-  position 282.08880709541955 601.5457238911529 298.05228171068774
+  orientation -0.22538211837953495 -0.22674276990983064 0.947518135450911 4.664529557055887
+  position 36.319183887144945 128.75449991922576 82.73690097921641
 }
 Background {
   skyColor [
@@ -21,8 +20,8 @@ Background {
   ]
 }
 DEF target Solid {
-  translation 158.054 -20.0798 0.11
-  rotation 0 0 -1 -5.307179586466759e-06
+  translation 56.6283620864111 -0.645563148511108 0.4
+  rotation 0 0 -1 0
   children [
     Shape {
       appearance PBRAppearance {
@@ -36,8 +35,8 @@ DEF target Solid {
   ]
 }
 DEF tesla3 TeslaModel3 {
-  translation 7.2399 -2.92126e-05 0.403306
-  rotation -0.005040100811399705 -0.9999479145141065 -0.008875000997186808 0.013770791647973632
+  translation 4 0.6 0.4
+  rotation -0.4559049304159197 0.1480659774009137 -0.8776258660492908 0
   controller "tesla_controller"
   supervisor TRUE
   sensorsSlotFront [
@@ -66,36 +65,28 @@ DEF tesla3 TeslaModel3 {
   ]
 }
 DEF ostacolo_0 ToyotaPriusSimple {
-  translation 49.4127 -2.3567 0.4
+  translation 209.3002932763371 -17.48247586536106 0.4
   rotation 0 0 -1 0
   name "vehicle(1)"
 }
 DEF ostacolo_1 RangeRoverSportSVRSimple {
-  translation 448.68 17.1 0.4
+  translation 46.5136850242333 -0.7042324134446689 0.4
+  rotation 0 0 -1 0
   name "vehicle(2)"
 }
 DEF ostacolo_2 LincolnMKZSimple {
-  translation 314.227 -2.96567 0.4
+  translation 119.86950225508939 -1.5993995661882472 0.4
   rotation 0 0 -1 0
   name "vehicle(3)"
 }
 DEF ostacolo_3 BmwX5Simple {
-  translation 180.595 -22.4242 0.4
-  rotation 0 0 1 4.692820414042842e-06
+  translation 214.74323447806847 -19.139682010518566 0.4
+  rotation 0 0 -1 0
   name "vehicle(4)"
 }
 DEF ostacolo_4 OilBarrel {
-  translation 68.6893 -3.1231 0.44
-  rotation 0 0 1 4.692820414042842e-06
-}
-DEF ostacolo_5 OilBarrel {
-  translation 62.9675 1.866 0.44
-  rotation 0 0 1 4.692820414042842e-06
-  name "oil barrel(1)"
-}
-DEF ostacolo_6 WorkBarrier {
-  translation 114.581 -82.8709 0
-  rotation 0 0 1 2.85387e-06
+  translation 256.1968887614363 -17.822623563447262 0.4
+  rotation 0 0 -1 0
 }
 Road {
   width 8
@@ -113,18 +104,7 @@ Road {
     220 -20 0
     240 -20 0
     260 -20 0
-    270 -15 0
-    280 -10 0
-    290 -5 0
-    300 0 0
-    400 0 0
-    410 5 0
-    420 10 0
-    430 15 0
-    440 20 0
-    520 20 0
   ]
-  splineSubdivision 5000
+  splineSubdivision 400
   roadBoundingObject TRUE
 }
-
