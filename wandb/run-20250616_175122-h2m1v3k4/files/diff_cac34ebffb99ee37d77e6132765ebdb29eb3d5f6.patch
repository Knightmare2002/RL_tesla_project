diff --git a/requirements.txt b/requirements.txt
index ff35dc1..2397cfc 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,3 +1,4 @@
 numpy
 gymnasium
-stable-baselines3
\ No newline at end of file
+stable-baselines3
+wandb
\ No newline at end of file
diff --git a/train_sac.py b/train_sac.py
index abec883..2123021 100644
--- a/train_sac.py
+++ b/train_sac.py
@@ -1,13 +1,56 @@
+import os
 from stable_baselines3 import SAC
 from stable_baselines3.sac.policies import MlpPolicy
-from webots_remote_env import WebotsRemoteEnv  # salva la classe sopra in questo file
+from stable_baselines3.common.callbacks import CheckpointCallback
+from wandb.integration.sb3 import WandbCallback
+import wandb
 
+from webots_remote_env import WebotsRemoteEnv
+
+wandb.init(
+    project="RL_tesla_project",          
+    name="SAC-Webots-run",             
+    sync_tensorboard=True,             
+    monitor_gym=True,                  
+    save_code=True
+)
+
+# Crea ambiente Webots
 env = WebotsRemoteEnv()
 
+# Percorsi per salvataggio
+CHECKPOINT_DIR = "C:\\Users\\samue\\OneDrive\\Desktop\\MLDL\\RL_tesla_project\\checkpoint_dir"
+MODEL_DIR = "C:\\Users\\samue\\OneDrive\\Desktop\\MLDL\\RL_tesla_project\\model_dir"
+os.makedirs(CHECKPOINT_DIR, exist_ok=True)
+os.makedirs(MODEL_DIR, exist_ok=True)
+
+# Callback per salvataggi periodici
+checkpoint_callback = CheckpointCallback(
+    save_freq=100_000,                     # salva ogni 100k timesteps
+    save_path=CHECKPOINT_DIR,
+    name_prefix="sac_model"
+)
+
+# Callback per integrazione con wandb
+wandb_callback = WandbCallback(
+    gradient_save_freq=0,
+    model_save_path=MODEL_DIR,
+    verbose=2,
+)
+
 try:
-    model = SAC(MlpPolicy, env, verbose=0, device='cuda')
+    model = SAC(MlpPolicy, env, verbose=1, device='cuda', tensorboard_log="./tb_logs/")
     print(f'Using device: {model.device}')
-    model.learn(total_timesteps=2_000_000, progress_bar=True)
-    model.save("webots_sac_model")
+
+    model.learn(
+        total_timesteps=1_000_000,
+        progress_bar=True,
+        callback=[checkpoint_callback, wandb_callback]
+    )
+
+    # Salva modello finale
+    model.save(os.path.join(MODEL_DIR, "webots_sac_final"))
+
 finally:
-    env.close()  # Assicura che venga sempre chiamato anche se il training fallisce
+    env.close()
+    wandb.finish()
